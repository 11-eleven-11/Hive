<h1 id='jigs'>Jigs</h1>
<p>Jigs are interactive objects on Bitcoin. Every jig has a JavaScript class and that class determines what the jig can do. Every jig is unique. Each has an owner and only that owner is able to update the jig. How is that secured? Bitcoin! Let&#39;s see how you can create a jig.</p>
<h2 id='creating'>Creating</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Post</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> 
    <span class="nx">init</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">new</span> <span class="nx">Post</span><span class="p">(</span><span class="s1">'Hello, world'</span><span class="p">)</span>
</code></pre>
<p>Let&#39;s create a new jig called <code>Post</code> that represents content on a message board. In JavaScript, your constructor is called <code>constructor</code> but for jigs, this method is called <code>init</code>. Think of them the same way. If <code>init</code> throws an exception, the jig will never be created, just like constructors. You create jigs by calling <code>new</code> as you would with normal JavaScript objects and they get created on Bitcoin. Pretty cool.</p>
<h2 id='updating'>Updating</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">EditablePost</span> <span class="kr">extends</span> <span class="nx">Post</span> <span class="p">{</span>
    <span class="nx">edit</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">editablePost</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EditablePost</span><span class="p">(</span><span class="s1">'Hello, world'</span><span class="p">)</span>

<span class="nx">editablePost</span><span class="p">.</span><span class="nx">edit</span><span class="p">(</span><span class="s1">'Hello, BitCoin'</span><span class="p">)</span>
</code></pre>
<p>Jigs are updated by calling methods. In fact, this is the only way to update jigs, because if users could change properties directly, then classes would become irrelevant. When you call a method, <code>run</code> publishes a Bitcoin transaction with data in an <code>op_return</code> that includes the method name and its arguments so that its state may be recomputed later simply by playing back every update one-by-one. For more information about how it works, see <a href="#how-it-works">How It Works</a>.</p>
<h2 id='sending'>Sending</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">send</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">pubkey</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">new</span> <span class="nx">Dragon</span><span class="p">().</span><span class="nx">send</span><span class="p">(</span><span class="s1">'&lt;some other public key&gt;'</span><span class="p">)</span>
</code></pre>
<p>Jigs may be sent to someone else by changing the <code>owner</code> property of a jig. Simply set the owner to the new owner&#39;s public key. Only public keys are supported at this time and they must be in a string format, but after changing the owner, the new owner will be able to update the jig.</p>
<h2 id='syncing'>Syncing</h2>
<blockquote>
<p>Wait for updates to complete</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">LoyaltyCard</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
    <span class="nx">init</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">stamps</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
    <span class="nx">stamp</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">stamps</span> <span class="o">+=</span><span class="mi">1</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">card</span> <span class="o">=</span> <span class="nx">await</span> <span class="k">new</span> <span class="nx">LoyaltyCard</span><span class="p">().</span><span class="nx">sync</span><span class="p">()</span>

<span class="nx">card</span><span class="p">.</span><span class="nx">stamp</span><span class="p">()</span>
<span class="nx">await</span> <span class="nx">card</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>
</code></pre>
<blockquote>
<p>Sync a jig from its origin to its latest state</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">card2</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">card</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span>
<span class="nx">card2</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>
</code></pre>
<p><code>run</code> is asyncronous. When you create or update jigs, <code>run</code> creates Bitcoin transactions for you in the background and broadcasts them to the network. As with any network request, the request may sometimes fail. Your connection may go down or a node on the network may reject your transaction for various reasons. In addition, your jigs may be behind the latest state on the network. <code>run</code> does not automatically update your jigs.</p>

<p>Therefore, every jig has a <code>sync()</code> method to ensure your local state is the same as that on the network. Calling <code>jig.sync()</code> returns a promise that resolves once all pending transactions are published successfully and the jig is updated with any new transactions from the network. Any errors with the network requests or validation will cause the promise to be rejected.</p>
<h2 id='interactivity'>Interactivity</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Event</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">createTicket</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">Ticket</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Ticket</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">event</span> <span class="o">=</span> <span class="nx">event</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Event</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">Ticket</span> <span class="p">}</span>
</code></pre>
<p>Jigs may create other jigs. Calling <code>new</code> to construct a jig within another jig&#39;s methods run will create a new output in the transaction. The <code>Jig.deps</code> property may be used to specify class dependencies because by default Jig code runs in a sandbox without access to other code.</p>

<p>Jigs may store other jigs as properties too. Think of these as standard JavaScript references that you may read or write. However, if stored jigs are updated, then their owners must also sign the Bitcoin transaction that updates their state. Reads have similar rules. For more information on spending rules, see the section titled <a href="#how-it-works">How It Works</a>.</p>
<h2 id='extending'>Extending</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">EditablePost</span> <span class="kr">extends</span> <span class="nx">Post</span> <span class="p">{</span>
  <span class="nx">edit</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Jig classes may be extended from other jig classes to add or alter behavior. This is a great way to build off of established jigs and even support modding communities. Class <code>super</code> calls work as expected, and there is no need to specify parents as dependencies because they will be automatically detected. </p>
<h2 id='backing'>Backing</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Donation</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">owner</span><span class="p">,</span> <span class="nx">satoshis</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">pubkey</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">satoshis</span> <span class="o">=</span> <span class="nx">satoshis</span>
  <span class="p">}</span>

  <span class="nx">withdraw</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">satoshis</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">new</span> <span class="nx">Donation</span><span class="p">(</span><span class="s1">'I like your videos'</span><span class="p">,</span> <span class="nx">pubkey</span><span class="p">,</span> <span class="mi">100000</span><span class="p">)</span>
</code></pre>
<p>Jigs may be backed by Bitcoins. When a jig is backed, it means that the output associated with that jig has a non-dust value in it. Backed jigs let users send money between each other and provide a baseline value for items. To back a jig, set the <code>satoshis</code> property to any non-negative number. Your purse will automatically deposit that amount into the jig. When the <code>satoshis</code> property is later decreased, those Bitcoins will be withdrawn to the jig owner&#39;s purse.</p>

<p>It is important to remember that these are <em>backed</em> jigs and not smart contracts. The jig&#39;s owner may always melt the satoshis out of the jig and in doing so destroy the jig.</p>

<aside class="notice">
<b>Note:</b> All bitcoin outputs must have an amount at least the dust limit, currently 546 satoshis, to be accepted by the network. `run` will choose the greater of the `satoshis` property and this dust limit when building outputs.
</aside>
<h2 id='comparing-classes'>Comparing Classes</h2>
<blockquote>
<p>Attaching an item</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Hat</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> <span class="p">}</span>

<span class="kr">class</span> <span class="nx">Person</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">wear</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Hat</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">item</span> <span class="o">=</span> <span class="nx">item</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Person</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">Hat</span> <span class="p">}</span>
</code></pre>
<p>The <code>constructor</code> property is useful for checking the class of a jig. Because JavaScript is dynamically typed, you should always check the types of your parameters. You can compare the <code>constructor</code> to known dependencies and also read its class properties. Unlike other properties, reading the <code>constructor</code> is not considered a read when determining which jigs to spend because its value does not change.</p>

<p>Sometimes you may wish to check if a class is part of a changing set. For example, a game may have a list of item classes that may change over time. For that, see the <a href="#storing-classes">Storing Classes</a> section.</p>

<aside class="warning">
<b>Warning:</b> Using `instanceof` is not recommended for comparing classes because anyone may extend a class and change its behavior.
</aside>
<h2 id='limiting-supply'>Limiting Supply</h2>
<blockquote>
<p>Pattern 1: Minter keeps a list</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Game</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">weapons</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">}</span>
  <span class="nx">createWeapon</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">weapons</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'too many weapons'</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">weapons</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Weapon</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weapons</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">weapons</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Weapon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">game</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">game</span> <span class="o">=</span> <span class="nx">game</span> <span class="p">}</span>
  <span class="nx">valid</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">game</span><span class="p">.</span><span class="nx">weapon</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Game</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">Weapon</span> <span class="p">}</span>
</code></pre>
<blockquote>
<p>Pattern 2: Child modifies parent</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Game</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">weaponCount</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
  <span class="nx">createWeapon</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">weaponCount</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'too many weapons'</span><span class="p">)</span> <span class="p">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">Weapon</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">incrementWeaponCount</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">weaponCount</span><span class="o">++</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Weapon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">game</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">game</span> <span class="o">=</span> <span class="nx">game</span>
    <span class="nx">game</span><span class="p">.</span><span class="nx">incrementWeaponCount</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Game</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">Weapon</span> <span class="p">}</span>
</code></pre>
<p>The supply of a jig class may be limited through the use of a <em>minter</em>. The <em>minter</em> is a separate jig responsible for creating the limited-supply jigs and knowing when to stop, after which it throws an error. It is important that it not be possible to inflate the supply by creating jigs outside of the <em>minter</em>. To enforce this, we recommend one of two patterns:</p>

<ol>
<li><p><strong>Minter keeps a list</strong>: In this pattern, the <em>minter</em> jig has an internal list of all jigs it creates. This list is the official list, and the user has the responsibility to check that jigs they receive are part of this list. Although this pattern is simple to understand, the additional onus on users to validate may be undesirable.</p></li>
<li><p><strong>Child-modifies-parent</strong>: In this pattern, the child calls a method on the parent when it is constructed to update the parent in some way, perhaps by incrementing a counter or adding itself to a list. Because all jig updates require approval from their owner, this pattern enforces a limited-supply automatically and there is no need to check whether an item is part of a list. However, it is still important to check that the item&#39;s <em>minter</em> is the one expected.</p></li>
</ol>
<h2 id='downloading-classes'>Downloading Classes</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Data</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Data</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>

<span class="c1">// The location of the Data class is stored in Data.location</span>
</code></pre>
<blockquote>
<p>Load the Data class from another instance</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">Data</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">'&lt;class-location-goes-here&gt;'</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Data</span><span class="p">(</span><span class="s1">'abc'</span><span class="p">)</span>
</code></pre>
<p>You may wish to download existing code that has already been deployed, for example, to create more instances of a particular class. The <code>run.load</code> method, in addition to loading jigs, is also able to download, install and sandbox code from the blockchain.</p>
<h2 id='private-properties'>Private Properties</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_numberOfCrashLandings</span> <span class="o">=</span> <span class="mi">88</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">InsurancePolicy</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">dragon</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Throws an error !</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">dragon</span><span class="p">.</span><span class="nx">_numberOfCrashLandings</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">chargeMoreMoney</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Jigs may contain private variables and private methods by prefixing them with an underscore. This is a popular convention in JavaScript and <code>run</code> enforces it as a validation rule for Jigs. With private properties, you may precisely control the interface that users and other jigs interact with.</p>

<p>There are a few rules to learn. Private variables may only be read from within one of that jig&#39;s methods. If another kind of class attempts to read a private variable, <code>run</code> will throw an error. They may however be read externally. Private methods are similar that they may only be called as helper methods within the same jig or by another jig of the same class. However unlike private variables, it is an error to call a private method externally.</p>
